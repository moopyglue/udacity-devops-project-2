Description: >
  Simon Wall / MoopyGlue

Parameters:
  paramEnvName:
      Description: Single Parameter that we are passing with the env name.
      Type: String
  paramWebAppS3TGZ:
      Description: s3 location for TGZ file containing the web app files
      Type: String

Resources:

  #===============================================================
  # Security Groups
  #===============================================================

  SGLoadBal:
      Type: AWS::EC2::SecurityGroup
      Properties: 
          VpcId:
            Fn::ImportValue: !Sub "${paramEnvName}-VPCID"
          GroupDescription: Security Group Load Balancer
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80   # http access to server from externally
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp # open all ports for external access
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0            

  SGWebServers:
      Type: AWS::EC2::SecurityGroup
      Properties: 
          VpcId:
            Fn::ImportValue: !Sub "${paramEnvName}-VPCID"
          GroupDescription: Security Group Web Servers
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80   # http access to server from externally
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp  # ssh access to host from bastion host
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp # open all ports for external access
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0            


  #===============================================================
  # WebApp autoscaling host configuration  
  #   - AWS::AutoScaling::LaunchConfiguration
  #   - AWS::AutoScaling::AutoScalingGroup
  #===============================================================

  WebAppInstProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - udp2_s3readonly

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp ${paramWebAppS3TGZ} - | tar xvfz -
          reboot
      ImageId: ami-003634241a8fcdec0 # Ubuntu 10.04 LTS @ubuntu
      KeyName: udp2-ssh-privatesubnet
      IamInstanceProfile: !Ref WebAppInstProfile
      SecurityGroups:
      - Ref: SGWebServers
      InstanceType: t3.micro
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${paramEnvName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '2'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  #===============================================================
  # WebApp hosts load balancing config  
  #   - AWS::ElasticLoadBalancingV2::LoadBalancer
  #   - AWS::ElasticLoadBalancingV2::Listener
  #   - AWS::ElasticLoadBalancingV2::ListenerRule
  #   - AWS::ElasticLoadBalancingV2::TargetGroup
  #===============================================================

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${paramEnvName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${paramEnvName}-PUB2-SN"
      SecurityGroups:
      - Ref: SGLoadBal

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: 
        Fn::ImportValue: !Sub "${paramEnvName}-VPCID"
